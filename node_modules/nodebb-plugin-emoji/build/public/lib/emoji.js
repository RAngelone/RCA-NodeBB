/// <amd-module name="emoji"/>
define("emoji", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var base = window.config.relative_path + "/plugins/nodebb-plugin-emoji";
    exports.base = base;
    var buster = window.config['cache-buster'];
    exports.buster = buster;
    function buildEmoji(emoji, defer) {
        var whole = ":" + emoji.name + ":";
        var deferClass = defer ? ' defer' : '';
        if (emoji.image) {
            return "<img\n      " + (defer ? 'data-' : '') + "src=\"" + base + "/emoji/" + emoji.pack + "/" + emoji.image + "\"\n      class=\"not-responsive emoji emoji-" + emoji.pack + " emoji--" + emoji.name + " " + deferClass + "\"\n      title=\"" + whole + "\"\n      alt=\"" + emoji.character + "\"\n    />";
        }
        return "<span\n    class=\"emoji-" + emoji.pack + " emoji--" + emoji.name + "\"\n    title=\"" + whole + "\"\n  ><span>" + emoji.character + "</span></span>";
    }
    exports.buildEmoji = buildEmoji;
    exports.strategy = {
        match: /\B:([^\s\n:]*)?$/,
        search: function (term, callback) {
            if (!term) {
                callback(Object.keys(exports.table).map(function (key) { return exports.table[key]; }));
                return;
            }
            callback(exports.fuse.search(term));
        },
        index: 1,
        replace: function (emoji) {
            return ':' + emoji.name + ': ';
        },
        template: function (emoji) {
            return buildEmoji(emoji) + ' ' + emoji.name;
        },
        cache: true,
    };
    var initialized = false;
    function init(callback) {
        if (initialized) {
            return;
        }
        initialized = true;
        Promise.all([
            new Promise(function (resolve_1, reject_1) { require(['Fuse'], resolve_1, reject_1); }),
            new Promise(function (resolve_2, reject_2) { require(['composer/formatting'], resolve_2, reject_2); }),
            Promise.resolve($.getJSON(base + "/emoji/table.json?" + buster)),
        ]).then(function (_a) {
            var Fuse = _a[0], formatting = _a[1], tableData = _a[2];
            exports.table = tableData;
            var all = Object.keys(exports.table).map(function (name) { return exports.table[name]; });
            exports.fuse = new Fuse(all, {
                shouldSort: true,
                threshold: 0.6,
                location: 0,
                distance: 100,
                maxPatternLength: 32,
                keys: [
                    {
                        name: 'name',
                        weight: 0.6,
                    },
                    {
                        name: 'aliases',
                        weight: 0.3,
                    },
                    {
                        name: 'keywords',
                        weight: 0.3,
                    },
                ],
            });
            formatting.addButtonDispatch('emoji-add-emoji', function (textarea) {
                new Promise(function (resolve_3, reject_3) { require(['emoji-dialog'], resolve_3, reject_3); }).then(function (_a) {
                    var openForInsert = _a.openForInsert;
                    openForInsert(textarea);
                });
            });
            if (callback) {
                setTimeout(callback, 0);
            }
        }).catch(function (err) {
            var e = Error('[[emoji:meta-load-failed]]');
            console.error(e);
            window.app.alertError(e);
            throw err;
        });
    }
    exports.init = init;
});
//# sourceMappingURL=emoji.js.map