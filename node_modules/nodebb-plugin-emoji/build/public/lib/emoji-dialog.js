/// <amd-module name="emoji-dialog"/>
define("emoji-dialog", ["require", "exports", "translator", "composer/controls", "scrollStop", "emoji"], function (require, exports, translator_1, controls_1, scrollStop_1, emoji_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var $html = $('html');
    var dialogActions = {
        open: function (dialog) {
            $html.addClass('emoji-insert');
            return dialog.addClass('open');
        },
        close: function (dialog) {
            $html.removeClass('emoji-insert');
            return dialog.removeClass('open');
        },
    };
    var priorities = {
        people: 10,
        nature: 9,
        food: 8,
        activity: 7,
        travel: 6,
        objects: 5,
        symbols: 4,
        flags: 3,
        regional: 2,
        modifier: 1,
        other: 0,
    };
    // create modal
    function init(callback) {
        Promise.all([
            $.getJSON(emoji_1.base + "/emoji/categories.json?" + emoji_1.buster),
            $.getJSON(emoji_1.base + "/emoji/packs.json?" + emoji_1.buster),
        ]).then(function (_a) {
            var categoriesInfo = _a[0], packs = _a[1];
            var categories = Object.keys(categoriesInfo).map(function (category) {
                var emojis = categoriesInfo[category].map(function (name) { return emoji_1.table[name]; });
                return {
                    name: category,
                    emojis: emojis.map(function (emoji) { return ({
                        name: emoji.name,
                        html: emoji_1.buildEmoji(emoji, true),
                    }); }),
                };
            }).sort(function (a, b) {
                var aPriority = priorities[a.name] || 0;
                var bPriority = priorities[b.name] || 0;
                return bPriority - aPriority;
            });
            window.templates.parse('partials/emoji-dialog', {
                categories: categories,
                packs: packs,
            }, function (result) {
                translator_1.translate(result, function (html) {
                    var dialog = $(html).appendTo('body');
                    dialog.find('.emoji-tabs .nav-tabs a').click(function (e) {
                        e.preventDefault();
                        $(e.target).tab('show');
                    }).on('show.bs.tab', function (e) {
                        $(e.target.getAttribute('href'))
                            .find('.emoji-link img.defer')
                            .removeClass('defer')
                            .each(function (i, elem) {
                            var $elem = $(elem);
                            var src = $elem.attr('data-src');
                            $elem.attr('src', src);
                        });
                    }).first().trigger('show.bs.tab');
                    dialog.modal({
                        backdrop: false,
                        show: false,
                    });
                    scrollStop_1.apply(dialog.find('.tab-content')[0]);
                    var close = function () { return dialogActions.close(dialog); };
                    $(window).on('action:composer.discard action:composer.submit', close);
                    dialog.find('.close').click(close);
                    if (dialog.draggable) {
                        dialog.draggable({
                            handle: '.top-bar',
                        });
                    }
                    callback(dialog);
                });
            });
        });
    }
    exports.init = init;
    function openForInsert(textarea) {
        function after(dialog) {
            if (dialog.hasClass('open')) {
                dialogActions.close(dialog);
                return;
            }
            dialog.off('click').on('click', '.emoji-link', function (e) {
                e.preventDefault();
                var name = e.currentTarget.name;
                var text = ":" + name + ": ";
                var selectionStart = textarea.selectionStart, selectionEnd = textarea.selectionEnd;
                var end = selectionEnd + text.length;
                var start = selectionStart === selectionEnd ? end : selectionStart;
                controls_1.insertIntoTextarea(textarea, text);
                controls_1.updateTextareaSelection(textarea, start, end);
                $(textarea).trigger('input');
            });
            var buttonRect = $('[data-format="emoji-add-emoji"]')[0].getBoundingClientRect();
            var position = {
                bottom: 'auto',
                top: 'auto',
                right: 'auto',
                left: 'auto',
            };
            if (buttonRect.top > 440) {
                position.top = buttonRect.top - 400 + "px";
            }
            else {
                position.top = buttonRect.top + 40 + "px";
            }
            if (buttonRect.left < window.innerWidth / 2) {
                position.left = buttonRect.left + 40 + "px";
            }
            else {
                position.left = buttonRect.left - 400 + "px";
            }
            dialog.css(position);
            dialogActions.open(dialog);
        }
        var dialog = $('#emoji-dialog');
        if (dialog.length) {
            after(dialog);
        }
        else {
            init(after);
        }
    }
    exports.openForInsert = openForInsert;
});
//# sourceMappingURL=emoji-dialog.js.map