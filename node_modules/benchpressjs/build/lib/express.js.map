{"version":3,"sources":["../../lib/express.js"],"names":["fs","require","Benchpress","runtime","evaluate","__express","filepath","data","next","addGlobals","_locals","cache","template","output","helpers","process","nextTick","e","readFile","err","file","code","toString","message","stack","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAKC,QAAQ,IAAR,CAAX;;AAEA,MAAMC,aAAaD,QAAQ,iBAAR,CAAnB;AACA,MAAME,UAAUF,QAAQ,WAAR,CAAhB;AACA,MAAMG,WAAWH,QAAQ,YAAR,CAAjB;;AAEA;;;;;;AAMA,SAASI,SAAT,CAAmBC,QAAnB,EAA6BC,IAA7B,EAAmCC,IAAnC,EAAyC;AACvCD,SAAOL,WAAWO,UAAX,CAAsBF,IAAtB,CAAP;AACAA,OAAKG,OAAL,GAAe,IAAf;;AAEA,MAAIR,WAAWS,KAAX,CAAiBL,QAAjB,CAAJ,EAAgC;AAC9B,QAAI;AACF,YAAMM,WAAWV,WAAWS,KAAX,CAAiBL,QAAjB,CAAjB;AACA,YAAMO,SAASV,QAAQD,WAAWY,OAAnB,EAA4BP,IAA5B,EAAkCK,QAAlC,CAAf;;AAEAG,cAAQC,QAAR,CAAiBR,IAAjB,EAAuB,IAAvB,EAA6BK,MAA7B;AACD,KALD,CAKE,OAAOI,CAAP,EAAU;AACVF,cAAQC,QAAR,CAAiBR,IAAjB,EAAuBS,CAAvB;AACD;AACD;AACD;;AAEDjB,KAAGkB,QAAH,CAAYZ,QAAZ,EAAsB,OAAtB,EAA+B,CAACa,GAAD,EAAMC,IAAN,KAAe;AAC5C,QAAID,GAAJ,EAAS;AACPX,WAAKW,GAAL;AACA;AACD;;AAED,UAAME,OAAOD,KAAKE,QAAL,EAAb;AACA,QAAI;AACF,YAAMV,WAAWV,WAAWS,KAAX,CAAiBL,QAAjB,IAA6BF,SAASiB,IAAT,CAA9C;AACA,YAAMR,SAASV,QAAQD,WAAWY,OAAnB,EAA4BP,IAA5B,EAAkCK,QAAlC,CAAf;;AAEAG,cAAQC,QAAR,CAAiBR,IAAjB,EAAuB,IAAvB,EAA6BK,MAA7B;AACD,KALD,CAKE,OAAOI,CAAP,EAAU;AACVA,QAAEM,OAAF,GAAa,+BAA8BjB,QAAS,OAAMW,EAAEM,OAAQ,EAApE;AACAN,QAAEO,KAAF,GAAW,+BAA8BlB,QAAS,OAAMW,EAAEO,KAAM,EAAhE;;AAEAT,cAAQC,QAAR,CAAiBR,IAAjB,EAAuBS,CAAvB;AACD;AACF,GAlBD;AAmBD;;AAEDQ,OAAOC,OAAP,GAAiBrB,SAAjB","file":"express.js","sourcesContent":["'use strict';\n\nconst fs = require('fs');\n\nconst Benchpress = require('./benchpress.js');\nconst runtime = require('./runtime');\nconst evaluate = require('./evaluate');\n\n/**\n * Provide functionality to act as an express engine\n * @param {string} filepath - Compiled template file path\n * @param {Object} data - Data with which to parse the template\n * @param {function} next - (err, output)\n */\nfunction __express(filepath, data, next) {\n  data = Benchpress.addGlobals(data);\n  data._locals = null;\n\n  if (Benchpress.cache[filepath]) {\n    try {\n      const template = Benchpress.cache[filepath];\n      const output = runtime(Benchpress.helpers, data, template);\n\n      process.nextTick(next, null, output);\n    } catch (e) {\n      process.nextTick(next, e);\n    }\n    return;\n  }\n\n  fs.readFile(filepath, 'utf-8', (err, file) => {\n    if (err) {\n      next(err);\n      return;\n    }\n\n    const code = file.toString();\n    try {\n      const template = Benchpress.cache[filepath] = evaluate(code);\n      const output = runtime(Benchpress.helpers, data, template);\n\n      process.nextTick(next, null, output);\n    } catch (e) {\n      e.message = `Parsing failed for template ${filepath}:\\n ${e.message}`;\n      e.stack = `Parsing failed for template ${filepath}:\\n ${e.stack}`;\n\n      process.nextTick(next, e);\n    }\n  });\n}\n\nmodule.exports = __express;\n"]}