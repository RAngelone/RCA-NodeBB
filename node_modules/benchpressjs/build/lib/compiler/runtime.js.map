{"version":3,"sources":["../../../lib/compiler/runtime.js"],"names":["get","value","Array","isArray","length","iter","obj","each","output","keys","Object","i","helper","context","helpers","helperName","args","out","apply","e","runtime","templateFunction","module","exports"],"mappings":"AAAA;;AAEA;;;;;;AAKA,SAASA,GAAT,CAAaC,KAAb,EAAoB;AACnB,SAAOA,SAAS,IAAT,IAAkBC,MAAMC,OAAN,CAAcF,KAAd,KAAwBA,MAAMG,MAAN,KAAiB,CAA3D,GAAgE,EAAhE,GAAqEH,KAA5E;AACA;;AAED;;;;;;AAMA,SAASI,IAAT,CAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AACxB,MAAIC,SAAS,EAAb;AACA,QAAMC,OAAOC,OAAOD,IAAP,CAAYH,GAAZ,CAAb;AACA,QAAMF,SAASK,KAAKL,MAApB;;AAEA,OAAK,IAAIO,IAAI,CAAb,EAAgBA,IAAIP,MAApB,EAA4BO,KAAK,CAAjC,EAAoC;AACnCH,cAAUD,KAAKE,KAAKE,CAAL,CAAL,EAAcA,CAAd,EAAiBP,MAAjB,CAAV;AACA;;AAED,SAAOI,MAAP;AACA;;AAED;;;;;;;;AAQA,SAASI,MAAT,CAAgBC,OAAhB,EAAyBC,OAAzB,EAAkCC,UAAlC,EAA8CC,IAA9C,EAAoD;AACnD,MAAI,OAAOF,QAAQC,UAAR,CAAP,KAA+B,UAAnC,EAA+C;AAC9C,WAAO,EAAP;AACA;AACD,MAAI;AACH,UAAME,MAAMH,QAAQC,UAAR,EAAoBG,KAApB,CAA0BL,OAA1B,EAAmCG,IAAnC,CAAZ;AACA,WAAOC,OAAO,EAAd;AACA,GAHD,CAGE,OAAOE,CAAP,EAAU;AACX,WAAO,EAAP;AACA;AACD;;AAED;;;;;;;AAOA,SAASC,OAAT,CAAiBN,OAAjB,EAA0BD,OAA1B,EAAmCQ,gBAAnC,EAAqD;AACpD,SAAOA,iBAAiBP,OAAjB,EAA0BD,OAA1B,EAAmCb,GAAnC,EAAwCK,IAAxC,EAA8CO,MAA9C,CAAP;AACA;;AAED;;AAEAU,OAAOC,OAAP,GAAiBH,OAAjB;;AAEA","file":"runtime.js","sourcesContent":["'use strict';\n\n/**\n * Convert null and undefined values to empty strings\n * @param {any} value\n * @returns {string}\n */\nfunction get(value) {\n\treturn value == null || (Array.isArray(value) && value.length === 0) ? '' : value;\n}\n\n/**\n * Iterate over an object or array\n * @param {string[]} obj - Iteratee object / array\n * @param {function} each - Callback to execute on each item\n * @return {string}\n */\nfunction iter(obj, each) {\n\tlet output = '';\n\tconst keys = Object.keys(obj);\n\tconst length = keys.length;\n\n\tfor (let i = 0; i < length; i += 1) {\n\t\toutput += each(keys[i], i, length);\n\t}\n\n\treturn output;\n}\n\n/**\n * Execute a helper\n * @param {object} context - Base data object\n * @param {object} helpers - Map of helper functions\n * @param {string} helperName - Name of helper to execute\n * @param {any[]} args - Array of arguments\n * @returns {string}\n */\nfunction helper(context, helpers, helperName, args) {\n\tif (typeof helpers[helperName] !== 'function') {\n\t\treturn '';\n\t}\n\ttry {\n\t\tconst out = helpers[helperName].apply(context, args);\n\t\treturn out || '';\n\t} catch (e) {\n\t\treturn '';\n\t}\n}\n\n/**\n * Run a compiled template function\n * @param {object} helpers - Map of helper functions\n * @param {object} context - Base data object\n * @param {function} templateFunction - Compiled template function\n * @returns {string}\n */\nfunction runtime(helpers, context, templateFunction) {\n\treturn templateFunction(helpers, context, get, iter, helper);\n}\n\n/* build:SERVER-ONLY:open */\n\nmodule.exports = runtime;\n\n/* build:SERVER-ONLY:close */\n"]}