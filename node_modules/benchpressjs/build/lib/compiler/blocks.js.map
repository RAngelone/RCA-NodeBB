{"version":3,"sources":["../../../lib/compiler/blocks.js"],"names":["t","require","c","getBlocks","ast","Array","isArray","map","node","isReturnStatement","argument","isConditionalExpression","alternate","consequent","isBinaryExpression","left","right","out","side","forEach","block","isCallExpression","isIdentifier","callee","name","push","cleanName","replaceWith","newNode","filter","Boolean","reduce","prev","arr","concat","blocks","body","nodes","length","props","keysUsed","includes","objectProperty","stringLiteral","functionExpression","identifier","runtimeParams","blockStatement","returnStatement","callExpression","memberExpression","BLOCKS","expressionStatement","assignmentExpression","objectExpression","module","exports"],"mappings":"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","file":"blocks.js","sourcesContent":["'use strict';\n\nconst t = require('babel-types');\n\nconst c = require('./constants');\n\n/**\n * Get block from ast array\n * @param {object[]} ast\n * @returns {object}\n */\nfunction getBlocks(ast) {\n  ast = Array.isArray(ast) ? ast : [ast];\n\n  return ast.map((node) => {\n    if (t.isReturnStatement(node)) {\n      return getBlocks(node.argument);\n    }\n    if (t.isConditionalExpression(node)) {\n      return node.alternate ? [\n        ...getBlocks(node.consequent),\n        ...getBlocks(node.alternate),\n      ] : getBlocks(node.consequent);\n    }\n    if (t.isBinaryExpression(node)) {\n      const { left, right } = node;\n      const out = [];\n\n      right.side = 'right';\n      left.side = 'left';\n\n      [right, left].forEach((block) => {\n        if (t.isCallExpression(block) && t.isIdentifier(block.callee, { name: 'iter' })) {\n          out.push({\n            block,\n            name: block.name,\n            cleanName: block.cleanName,\n            replaceWith: (newNode) => {\n              node[block.side] = newNode;\n            },\n          });\n        } else {\n          out.push(...getBlocks(block));\n        }\n      });\n\n      return out;\n    }\n\n    return null;\n  }).filter(Boolean).reduce((prev, arr) => prev.concat(arr), []);\n}\n\n/**\n * Pull top-level blocks out of ast and expose them at `compiled.blocks`\n * @param {object} ast\n * @returns {object}\n */\nfunction blocks(ast) {\n  const body = [ast];\n  // start with body of function\n  const nodes = getBlocks(ast.body.body);\n  if (nodes.length) {\n    const props = [];\n    const keysUsed = [];\n    nodes.forEach(({ name, cleanName, block, replaceWith }) => {\n      if (keysUsed.includes(name)) {\n        return;\n      }\n      keysUsed.push(name);\n\n      props.push(t.objectProperty(\n        t.stringLiteral(name),\n        t.functionExpression(\n          t.identifier(cleanName),\n          c.runtimeParams,\n          t.blockStatement([t.returnStatement(block)])\n        )\n      ));\n\n      replaceWith(t.callExpression(t.memberExpression(\n        c.BLOCKS,\n        t.stringLiteral(name),\n        true\n      ), c.runtimeParams));\n    });\n    body.push(t.expressionStatement(t.assignmentExpression(\n      '=',\n      c.BLOCKS,\n      t.objectExpression(props)\n    )));\n  }\n\n  return body;\n}\n\nmodule.exports = blocks;\n\n"]}