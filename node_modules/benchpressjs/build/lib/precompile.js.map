{"version":3,"sources":["../../lib/precompile.js"],"names":["uglifyjs","require","prefixer","tokenizer","parser","compiler","blocks","codegen","precompile","source","options","callback","promise","Promise","try","opts","Object","assign","defaults","Error","prefixed","tokens","parsed","fnAst","ast","compiled","minified","minify","wrapped","replace","result","error","code","then","process","nextTick","err","unsafe","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,WAAWC,QAAQ,WAAR,CAAjB;;AAEA,MAAMC,WAAWD,QAAQ,qBAAR,CAAjB;AACA,MAAME,YAAYF,QAAQ,sBAAR,CAAlB;AACA,MAAMG,SAASH,QAAQ,mBAAR,CAAf;AACA,MAAMI,WAAWJ,QAAQ,qBAAR,CAAjB;AACA,MAAMK,SAASL,QAAQ,mBAAR,CAAf;AACA,MAAMM,UAAUN,QAAQ,oBAAR,CAAhB;;AAEA;;;;;;;;;;;;;AAaA,SAASO,UAAT,CAAoBC,MAApB,EAA4BC,OAA5B,EAAqCC,QAArC,EAA+C;AAC7C,MAAI,OAAOF,MAAP,KAAkB,QAAlB,IAA8B,OAAOC,OAAP,KAAmB,UAArD,EAAiE;AAC/DC,eAAWD,OAAX;AACAA,cAAUD,MAAV;AACAA,aAASC,QAAQD,MAAjB;AACD;;AAED,QAAMG,UAAUC,QAAQC,GAAR,CAAY,MAAM;AAChC,UAAMC,OAAOC,OAAOC,MAAP,CAAc,EAAd,EAAkBT,WAAWU,QAA7B,EAAuCR,OAAvC,CAAb;;AAEA,QAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,YAAMU,MAAM,yBAAN,CAAN;AACD;;AAED,UAAMC,WAAWlB,SAASO,MAAT,CAAjB;AACA,UAAMY,SAASlB,UAAUiB,QAAV,CAAf;AACA,UAAME,SAASlB,OAAOiB,MAAP,CAAf;AACA,UAAME,QAAQlB,SAASiB,MAAT,EAAiBP,IAAjB,CAAd;AACA,UAAMS,MAAMlB,OAAOiB,KAAP,CAAZ;AACA,UAAME,WAAWlB,QAAQiB,GAAR,EAAa,EAAEE,UAAUX,KAAKY,MAAjB,EAAb,CAAjB;;AAEA,UAAMC,UAAW;;;;;;;;IAQjBH,SAASI,OAAT,CAAiB,KAAjB,EAAwB,MAAxB,CAAgC;;;;KARhC;;AAcA,QAAI,CAACd,KAAKY,MAAV,EAAkB;AAChB,aAAOC,OAAP;AACD;AACD,UAAME,SAAS9B,SAAS2B,MAAT,CAAgB;AAC7B,uBAAiBC;AADY,KAAhB,CAAf;;AAIA,QAAIE,OAAOC,KAAX,EAAkB;AAChB,YAAMD,OAAOC,KAAb;AACD;;AAED,WAAOD,OAAOE,IAAd;AACD,GAxCe,CAAhB;;AA0CA,MAAIrB,QAAJ,EAAc;AACZC,YAAQqB,IAAR,CACED,QAAQE,QAAQC,QAAR,CAAiBxB,QAAjB,EAA2B,IAA3B,EAAiCqB,IAAjC,CADV,EAEEI,OAAOF,QAAQC,QAAR,CAAiBxB,QAAjB,EAA2ByB,GAA3B,CAFT;AAID;;AAED,SAAOxB,OAAP;AACD;;AAEDJ,WAAWU,QAAX,GAAsB;AACpBS,UAAQ,KADY;AAEpBU,UAAQ;AAFY,CAAtB;;AAKAC,OAAOC,OAAP,GAAiB/B,UAAjB","file":"precompile.js","sourcesContent":["'use strict';\n\nconst uglifyjs = require('uglify-js');\n\nconst prefixer = require('./compiler/prefixer');\nconst tokenizer = require('./compiler/tokenizer');\nconst parser = require('./compiler/parser');\nconst compiler = require('./compiler/compiler');\nconst blocks = require('./compiler/blocks');\nconst codegen = require('./compiler/codegen');\n\n/**\n * Precompile a benchpress template\n * - `precompiled(source, options): Promise<string>`\n * - `precompile(source, options, callback) => callback(err, output)`\n * - `precompile({ source, ...options }, callback) => callback(err, output)`\n *\n * @param {string} source - Template source\n * @param {Object} options\n * @param {boolean} [options.minify = false] - Output minified code\n * @param {boolean} [options.unsafe = false] - Disable safety checks, will throw on misshapen data\n * @param {function} [callback] - (err, output)\n * @returns {Promise<string>} - output code\n */\nfunction precompile(source, options, callback) {\n  if (typeof source === 'object' && typeof options === 'function') {\n    callback = options;\n    options = source;\n    source = options.source;\n  }\n\n  const promise = Promise.try(() => {\n    const opts = Object.assign({}, precompile.defaults, options);\n\n    if (typeof source !== 'string') {\n      throw Error('source must be a string');\n    }\n\n    const prefixed = prefixer(source);\n    const tokens = tokenizer(prefixed);\n    const parsed = parser(tokens);\n    const fnAst = compiler(parsed, opts);\n    const ast = blocks(fnAst);\n    const compiled = codegen(ast, { minified: opts.minify });\n\n    const wrapped = `\n(function (factory) {\n  if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    define(factory);\n  }\n})(function () {\n  ${compiled.replace(/\\n/g, '\\n\\t')}\n\n  return compiled;\n});\n    `;\n\n    if (!opts.minify) {\n      return wrapped;\n    }\n    const result = uglifyjs.minify({\n      'benchpress.js': wrapped,\n    });\n\n    if (result.error) {\n      throw result.error;\n    }\n\n    return result.code;\n  });\n\n  if (callback) {\n    promise.then(\n      code => process.nextTick(callback, null, code),\n      err => process.nextTick(callback, err),\n    );\n  }\n\n  return promise;\n}\n\nprecompile.defaults = {\n  minify: false,\n  unsafe: false,\n};\n\nmodule.exports = precompile;\n"]}